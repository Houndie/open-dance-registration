syntax = "proto3";
package proto;

import "queries.proto";

service RegistrationSchemaService {
	rpc UpsertRegistrationSchemas(UpsertRegistrationSchemasRequest) returns (UpsertRegistrationSchemasResponse) {}
	rpc QueryRegistrationSchemas(QueryRegistrationSchemasRequest) returns (QueryRegistrationSchemasResponse) {}
	rpc DeleteRegistrationSchemas(DeleteRegistrationSchemasRequest) returns (DeleteRegistrationSchemasResponse) {}
}

message UpsertRegistrationSchemasRequest {
	repeated RegistrationSchema registration_schemas = 1;
}

message UpsertRegistrationSchemasResponse {
	repeated RegistrationSchema registration_schemas = 1;
}

message QueryRegistrationSchemasRequest {
	RegistrationSchemaQuery query = 1;
}

message QueryRegistrationSchemasResponse {
	repeated RegistrationSchema registration_schemas = 1;
}

message DeleteRegistrationSchemasRequest {
	repeated string ids = 1;
}

message DeleteRegistrationSchemasResponse {};

message RegistrationSchema {
	string event_id = 1;
	repeated RegistrationSchemaItem items = 2;
}

message RegistrationSchemaItem {
	string id = 1;
	string name = 2;
	RegistrationSchemaItemType type = 3;
}

message RegistrationSchemaItemType {
	oneof type {
		TextType text = 1;
		CheckboxType checkbox = 2;
		SelectType select = 3;
		MultiSelectType multi_select = 4;
	}
}

message TextType {
	enum Display {
		SMALL = 0;
		LARGE = 1;
	}

	string default = 1;
	Display display = 2;
}

message CheckboxType {
	bool default = 1;
}

message SelectType {
	enum Display {
		RADIO = 0;
		DROPDOWN = 1;
	}

	uint32 default = 1;
	Display display = 2;
	repeated SelectOption options = 3;
}

message SelectOption {
	string id = 1;
	string name = 2;
	string product_id = 3;
}

message MultiSelectType {
	enum Display {
		CHECKBOXES = 0;
		MULTISELECT_BOX = 1;
	}

	repeated uint32 defaults = 1;
	Display display = 2;
	repeated SelectOption options = 3;
}

message RegistrationSchemaQuery {
	oneof query {
		StringQuery event_id = 2;
		CompoundRegistrationSchemaQuery compound = 3;
	}
}

message CompoundRegistrationSchemaQuery {
	enum Operator {
		AND = 0;
		OR = 1;
	}

	Operator operator = 1;
	repeated RegistrationSchemaQuery queries = 2;
}
