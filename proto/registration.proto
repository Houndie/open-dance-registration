syntax = "proto3";
package registration;

service RegistrationService {
	rpc UpsertRegistrations(UpsertRegistrationsRequest) returns (UpsertRegistrationsResponse) {}
	rpc QueryRegistrations(QueryRegistrationsRequest) returns (QueryRegistrationsResponse) {}
	rpc ListRegistrations(ListRegistrationsRequest) returns (ListRegistrationsResponse) {}
	rpc DeleteRegistrations(DeleteRegistrationsRequest) returns (DeleteRegistrationsResponse) {}
}

message UpsertRegistrationsRequest {
	repeated Registration registrations = 1;
}

message UpsertRegistrationsResponse {
	repeated Registration registrations = 1;
}

message QueryRegistrationsRequest {
	RegistrationQuery query = 1;
}

message QueryRegistrationsResponse {
	repeated Registration registrations = 1;
}

message ListRegistrationsRequest {
	repeated string ids = 1;
}

message ListRegistrationsResponse {
	repeated Registration registrations = 1;
}

message DeleteRegistrationsRequest {
	repeated string ids = 1;
}

message DeleteRegistrationsResponse {}

message Registration {
	string id = 1;
	string event_id = 2;
	repeated RegistrationItem items = 3;
}

message RegistrationItem {
	string id = 1;
	string schema_item_id = 2;
	oneof value {
		string string_value = 3;
		bool boolean_value = 4;
		uint32 unsigned_number_value = 5;
		RepeatedUint32 repeated_unsigned_number_value = 6;
	}
}

message RepeatedUint32 {
	repeated uint32 value = 1;
}

message RegistrationQuery {
	oneof query {
		EventIdQuery event_id = 1;
		CompoundRegistrationQuery compound = 2;
	}
}

message EventIdQuery {
	oneof operator {
		string equals = 1;
		string not_equals = 2;
	}
}

message CompoundRegistrationQuery {
	enum Operator {
		AND = 0;
		OR = 1;
	}

	Operator operator = 1;
	RegistrationQuery left = 2;
	RegistrationQuery right = 3;
}
